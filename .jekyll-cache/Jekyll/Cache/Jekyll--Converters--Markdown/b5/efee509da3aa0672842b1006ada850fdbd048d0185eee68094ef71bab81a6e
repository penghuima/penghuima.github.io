I"~<ul id="markdown-toc">
  <li><a href="#简介" id="markdown-toc-简介">简介</a>    <ul>
      <li><a href="#如何工作" id="markdown-toc-如何工作">如何工作</a></li>
      <li><a href="#如何使用" id="markdown-toc-如何使用">如何使用</a></li>
      <li><a href="#概念和术语" id="markdown-toc-概念和术语">概念和术语</a>        <ul>
          <li><a href="#工作空间-workspace" id="markdown-toc-工作空间-workspace">工作空间 Workspace</a></li>
          <li><a href="#包-package" id="markdown-toc-包-package">包 Package</a></li>
          <li><a href="#目标-target" id="markdown-toc-目标-target">目标 Target</a></li>
          <li><a href="#标签-label" id="markdown-toc-标签-label">标签 Label</a></li>
          <li><a href="#规则-rule" id="markdown-toc-规则-rule">规则 Rule</a></li>
          <li><a href="#build-文件" id="markdown-toc-build-文件">BUILD 文件</a></li>
          <li><a href="#依赖-dependency" id="markdown-toc-依赖-dependency">依赖 Dependency</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#安装" id="markdown-toc-安装">安装</a></li>
  <li><a href="#入门" id="markdown-toc-入门">入门</a>    <ul>
      <li><a href="#构建c项目" id="markdown-toc-构建c项目">构建C++项目</a>        <ul>
          <li><a href="#示例项目" id="markdown-toc-示例项目">示例项目</a></li>
          <li><a href="#通过bazel构建" id="markdown-toc-通过bazel构建">通过Bazel构建</a></li>
          <li><a href="#指定多个目标" id="markdown-toc-指定多个目标">指定多个目标</a></li>
          <li><a href="#使用多个包" id="markdown-toc-使用多个包">使用多个包</a></li>
        </ul>
      </li>
      <li><a href="#构建-java-项目" id="markdown-toc-构建-java-项目">构建 Java 项目</a></li>
    </ul>
  </li>
  <li><a href="#目录结构" id="markdown-toc-目录结构">目录结构</a></li>
  <li><a href="#外部依赖" id="markdown-toc-外部依赖">外部依赖</a>    <ul>
      <li><a href="#外部依赖类型" id="markdown-toc-外部依赖类型">外部依赖类型</a>        <ul>
          <li><a href="#bazel项目" id="markdown-toc-bazel项目">Bazel项目</a></li>
          <li><a href="#非bazel项目" id="markdown-toc-非bazel项目">非Bazel项目</a></li>
          <li><a href="#外部包" id="markdown-toc-外部包">外部包</a></li>
        </ul>
      </li>
      <li><a href="#依赖拉取" id="markdown-toc-依赖拉取">依赖拉取</a></li>
      <li><a href="#依赖缓存" id="markdown-toc-依赖缓存">依赖缓存</a></li>
    </ul>
  </li>
  <li><a href="#常见规则用例" id="markdown-toc-常见规则用例">常见规则用例</a></li>
</ul>

<h3 id="简介">简介</h3>

<p>Bazel是Google开源的，类似于Make、Maven或Gradle的构建和测试工具。它使用可读性强的、高层次的构建语言，支持多种编程语言，以及为多种平台进行交叉编译。</p>

<p>Bazel的优势：</p>

<ul>
  <li>高层次的构建语言：更加简单，Bazel抽象出库、二进制、脚本、数据集等概念，不需要编写调用编译器或链接器的脚本</li>
  <li>快而可靠：能够缓存所有已经完成的工作步骤，并且跟踪文件内容、构建命令的变动情况，避免重复构建。此外Bazel还支持高度并行构建、增量构建</li>
  <li>多平台支持：可以在Linux/macOS/Windows上运行，可以构建在桌面/服务器/移动设备上运行的应用程序</li>
  <li>可扩容性：处理10万以上源码文件时仍然能保持速度</li>
  <li>可扩展性：支持Android、C/C++、Java、Objective-C、Protocol Buffer、Python…还支持扩展以支持其它语言</li>
</ul>

<!--more-->

<p>BUILD文件的作用就是将workspace中的在build文件中声明过的依赖文件连接起来，共同构建为一个整体，存放于build-bin文件中，运行程序时只需运行build-bin文件即可得到输出，其中BUILD的依赖项deps中的文件在srcs文件修改后，再进行构建时，不会再构建deps文件，这样会增加效率便于管理。</p>

<p><strong>Bazel是一个Blaze的开源项目，是Blaze的一个子集，但是基本功能完全一致。</strong></p>

<h4 id="如何工作">如何工作</h4>

<p>当运行构建或者测试时，Bazel 会：</p>

<ol>
  <li>加载和目标相关的 BUILD 文件</li>
  <li>分析输入及其依赖，应用指定的构建规则，产生一个 Action 图。这个图表示需要构建的目标、目标之间的关系，以及为了构建目标需要执行的动作。Bazel 依据此图来跟踪文件变动，并确定哪些目标需要重新构建</li>
  <li>针对输入执行构建动作，直到最终的构建输出产生出来</li>
</ol>

<h4 id="如何使用">如何使用</h4>

<p>当你需要构建或者测试一个项目时，通常执行以下步骤：</p>

<ol>
  <li>下载并安装Bazel</li>
  <li>创建一个工作空间。Bazel 从此工作空间寻找构建输入和 BUILD 文件，同时也将构建输出存放在（指向）工作空间（的符号链接中 bazel-bin ）</li>
  <li>编写 BUILD文件，以及可选的 WORKSPACE 文件，告知 Bazel 需要构建什么，如何构建。此文件基于 Starlark 这种 DSL(Domain Specific Language <em>领域特定语言</em> )</li>
  <li>从命令行调用 Bazel 命令，构建、测试或者运行项目</li>
</ol>

<h4 id="概念和术语">概念和术语</h4>

<h5 id="工作空间-workspace">工作空间 Workspace</h5>

<p>工作空间是一个目录，它包含：</p>

<ol>
  <li>构建目标所需要的源码文件，以及相应的 BUILD 文件</li>
  <li>指向构建结果的符号链接</li>
  <li><strong>WORKSPACE 文件</strong>，可以为空，<strong>可以包含对外部依赖的引用</strong></li>
</ol>

<h5 id="包-package">包 Package</h5>

<p>包是工作空间中主要的代码组织单元，其中包含一系列相关的文件（主要是代码）以及描述这些文件之间关系的BUILD 文件</p>

<p><strong>包是工作空间的子目录，它的根目录必须包含文件BUILD.bazel或BUILD</strong>。除了那些具有 BUILD 文件的子目录（子包）以外，其它子目录属于包的一部分</p>

<h5 id="目标-target">目标 Target</h5>

<p>包是一个容器，它的元素定义在BUILD文件中，包的元素称为<strong>目标</strong>，包括：</p>

<ol>
  <li>规则（Rule），指定输入集和输出集之间的关系，声明从输入产生输出的必要步骤。<strong>一个规则的输出可以是另外一个规则的输入</strong></li>
  <li>文件（File），可以分为两类：
    <ol>
      <li>源文件</li>
      <li>自动生成的文件（Derived files），由构建工具依据规则生成</li>
    </ol>
  </li>
  <li><strong>包组：</strong>一组包，包组用于限制特定规则的<strong>可见性(visibility)</strong>。包组由函数package_group定义，参数是包的列表和包组名称。你可以在规则的 visibility 属性中引用包组，声明那些包组可以引用当前包中的规则</li>
</ol>

<p>任何包生成的文件都属于当前包，不能为其它包生成文件。但是可以从其它包中读取输入</p>

<h5 id="标签-label">标签 Label</h5>

<p>引用一个目标时需要使用“标签”。标签的规范化表示  <code class="language-plaintext highlighter-rouge">@project//my/app/main : app_binary</code>， <strong>冒号前面是所属的包名，后面是目标名</strong>。如果不指定目标名，则默认以包路径最后一段作为目标名，例如：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//my/app
//my/app:app
</code></pre></div></div>

<p>这两者是等价的。在BUILD文件中，引用当前包中目标时，包名部分可以省略，因此下面四种写法都可以等价：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 当前包为my/app</span>
//my/app:app
//my/app
:app
app
</code></pre></div></div>

<p>在BUILD文件中，<strong>引用当前包中定义的规则时，冒号不能省略</strong>。引用当前包中文件时，冒号可以省略。 例如： generate.cc。</p>

<p>但是，**从其它包引用时、从命令行引用时，都必须使用完整的标签 ** ：//my/app:generate.cc</p>

<p>@project 这一部分通常不需要使用，引用外部存储库中的目标时，project 填写外部存储库的名字。</p>

<h5 id="规则-rule">规则 Rule</h5>

<p>规则指定<strong>输入和输出</strong>之间的关系，并且说明产生输出的步骤。</p>

<p>规则有很多类型。每个规则都具有一个名称属性，此名称亦即目标名称。对于某些规则，此名称就是产生的输出的文件名。</p>

<p>在BUILD中声明规则的语法时：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">规则类型</span><span class="p">(</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s">"..."</span><span class="p">,</span>
    <span class="n">其它属性</span> <span class="o">=</span> <span class="p">...</span>
<span class="p">)</span>
</code></pre></div></div>

<h5 id="build-文件">BUILD 文件</h5>

<p>BUILD 文件定义了包的所有元数据。其中的语句被从上而下的逐条解释，某些语句的顺序很重要， 例如<strong>变量必须先定义后使用，但是规则声明的顺序无所谓</strong>。</p>

<p>BUILD 文件仅能包含 ASCII 字符，且不得声明函数、使用 for/if 语句，你可以在 Bazel 扩展,扩展名为.bzl 的文件中声明函数、控制结构。并在BUILD文件中用load语句加载Bazel扩展：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s">"//foo/bar:file.bzl"</span><span class="p">,</span> <span class="s">"some_library"</span><span class="p">)</span>
</code></pre></div></div>

<p>上面的语句加载 foo/bar/file.bzl 并添加其中定义的符号 some_libraray 到当前环境中，load 语句可以用来加载规则、函数、常量（字符串、列表等）。</p>

<p>load语句必须出现在顶级作用域，不能出现在函数中。第一个参数说明扩展的位置，你可以为导入的符号设置别名。</p>

<p>规则的类型，一般以编程语言为前缀，例如cc，java，后缀通常有：</p>

<ol>
  <li>*_binary 用于构建目标语言的可执行文件</li>
  <li>*_test 用于自动化测试，其目标是可执行文件，如果测试通过应该退出0</li>
  <li>*_library 用于构建目标语言的库</li>
</ol>

<h5 id="依赖-dependency">依赖 Dependency</h5>

<p>目标 A 依赖 B，就意味着 A 在构建或执行期间需要 B。所有目标的依赖关系构成非环有向图(DAG)称为依赖图。</p>

<p>距离为1的依赖称为直接依赖，大于1的依赖则称为传递性依赖。</p>

<p>依赖分为以下几种：</p>

<ol>
  <li><strong>srcs 依赖：</strong>直接被当前规则消费的文件</li>
  <li><strong>deps 依赖：</strong>独立编译的模块，为当前规则提供头文件、符号、库、数据</li>
  <li><strong>data 依赖：</strong>不属于源码，不影响目标如何构建，但是目标在运行时可能依赖之</li>
</ol>

<h3 id="安装">安装</h3>

<p>安装主要参考官网<a href="https://docs.bazel.build/versions/4.0.0/install-ubuntu.html#install-with-installer-ubuntu">安装教程</a></p>

<p>本机安装环境为 Ubuntu 18.04 64bit</p>

<p>安装方式：源码安装</p>

<ol>
  <li>
    <p>安装依赖</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>apt <span class="nb">install </span>g++ unzip zip   <span class="c">#下载 g++ 解压缩工具</span>
<span class="nv">$ </span>apt-get <span class="nb">install </span>openjdk-11-jdk  <span class="c">#下载JDk 11</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>下载源码并安装</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#第一步github上下载所需的bazel版本如4.0.0</span>
<span class="nv">$ </span><span class="nb">chmod</span> +x bazel-4.0.0-installer-linux-x86_64.sh   <span class="c">#添加权限</span>
<span class="nv">$ </span>./bazel-4.0.0-installer-linux-x86_64.sh <span class="nt">--user</span>   <span class="c">#安装执行</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>设置环境变量</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim ~/.bashrc   <span class="c">#打开当前登录用户家路径下的文件</span>
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$PATH</span><span class="s2">:</span><span class="nv">$HOME</span><span class="s2">/bin"</span>  <span class="c">#在 ~/.bashrc文件末尾追加此内容，然后重启</span>
<span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$PATH</span> <span class="c">#查看PATH路径</span>
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="入门">入门</h3>

<h4 id="构建c项目">构建C++项目</h4>

<p><a href="https://docs.bazel.build/versions/4.0.0/tutorial/cpp.html">官方c++教程</a>已经很详细了</p>

<h5 id="示例项目">示例项目</h5>

<p>执行下面的命令下载示例项目：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/bazelbuild/examples/
</code></pre></div></div>

<p>你可以看到stage1、stage2、stage3 这几个WORKSPACE：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>examples
└── cpp-tutorial
    ├──stage1
    │  ├── main
    │  │   ├── BUILD
    │  │   └── hello-world.cc
    │  └── WORKSPACE
    ├──stage2
    │  ├── main
    │  │   ├── BUILD
    │  │   ├── hello-world.cc
    │  │   ├── hello-greet.cc
    │  │   └── hello-greet.h
    │  └── WORKSPACE
    └──stage3
       ├── main
       │   ├── BUILD
       │   ├── hello-world.cc
       │   ├── hello-greet.cc
       │   └── hello-greet.h
       ├── lib
       │   ├── BUILD
       │   ├── hello-time.cc
       │   └── hello-time.h
       └── WORKSPACE
</code></pre></div></div>

<p>本节后续内容会依次使用到这三个WORKSPACE。<strong>从图中可以看到stage1、stage2、stage3 分别是包，根目录包含 BUILD，其次在包 stage3 中 lib 是子包（包含BUILD）</strong></p>

<h5 id="通过bazel构建">通过Bazel构建</h5>

<p>第一步是创建工作空间。工作空间中包含以下特殊文件：</p>

<ol>
  <li>WORKSPACE，此文件位于根目录中，将当前目录定义为Bazel工作空间</li>
  <li>BUILD，告诉Bazel项目的不同部分如何构建。工作空间中包含BUILD文件的目录称为包</li>
</ol>

<p>当Bazel构建项目时，所有的输入和依赖都必须位于工作空间中。除非被链接，不同工作空间的文件相互独立没有关系。</p>

<p>每个 BUILD 文件包含若干 Bazel 指令，其中最重要的指令类型是构建规则（Build Rule），构建规则说明如何产生期望的输出–例如可执行文件或库。 BUILD中的每个构建规则也称为目标（Target），目标指向若干源文件和依赖，也可以指向其它目标。</p>

<p>下面是stage1的BUILD文件：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#cpp-tutorial/stage1/main/BUILD</span>
cc_binary<span class="o">(</span>
    name <span class="o">=</span> <span class="s2">"hello-world"</span>,
    srcs <span class="o">=</span> <span class="o">[</span><span class="s2">"hello-world.cc"</span><span class="o">]</span>,
<span class="o">)</span>
</code></pre></div></div>

<p>这里定义了一个名为 hello-world 的目标，它使用了内置的 cc_binary 规则。该规则告诉Bazel，从源码hello-world.cc 构建一个自包含的可执行文件。</p>

<p>执行下面的命令可以触发构建：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#   //main: BUILD文件相对于工作空间的位置</span>
<span class="c">#          hello-world 是BUILD文件中定义的目标</span>
bazel build //main:hello-world
</code></pre></div></div>

<p>构建完成后，工作空间根目录会出现bazel-bin等目录，它们都是指向 $HOME/.cache/bazel 某个后代目录的符号链接。执行：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bazel-bin/main/hello-world
</code></pre></div></div>

<p>可以运行构建好的二进制文件。</p>

<p>查看依赖图</p>

<p>Bazel会根据BUILD中的声明产生一张依赖图，并根据这个依赖图实现精确的增量构建。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>graphviz xdot
bazel query <span class="nt">--nohost_deps</span> <span class="nt">--noimplicit_deps</span> <span class="s1">'deps(//main:hello-world)'</span> <span class="nt">--output</span> graph | xdot
</code></pre></div></div>

<h5 id="指定多个目标">指定多个目标</h5>

<p>大型项目通常会划分为多个包、多个目标，以实现更快的增量构建、并行构建。工作空间stage2包含单个包、两个目标：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#cpp-tutorial/stage2/main/BUILD</span>
<span class="c"># 首先构建hello-greet库，cc_library是内建规则</span>
cc_library<span class="o">(</span>
    name <span class="o">=</span> <span class="s2">"hello-greet"</span>,
    srcs <span class="o">=</span> <span class="o">[</span><span class="s2">"hello-greet.cc"</span><span class="o">]</span>,
    <span class="c"># 头文件</span>
    hdrs <span class="o">=</span> <span class="o">[</span><span class="s2">"hello-greet.h"</span><span class="o">]</span>,
<span class="o">)</span>

<span class="c"># 然后构建hello-world二进制文件</span>
cc_binary<span class="o">(</span>
    name <span class="o">=</span> <span class="s2">"hello-world"</span>,
    srcs <span class="o">=</span> <span class="o">[</span><span class="s2">"hello-world.cc"</span><span class="o">]</span>,
    deps <span class="o">=</span> <span class="o">[</span>
        <span class="c"># 提示Bazel，需要hello-greet才能构建当前目标</span>
        <span class="c"># 依赖当前包中的hello-greet目标</span>
        <span class="s2">":hello-greet"</span>,
    <span class="o">]</span>,
<span class="o">)</span>
</code></pre></div></div>

<h5 id="使用多个包">使用多个包</h5>

<p>工作空间stage3更进一步的划分出新的包，提供打印时间的功能：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#cpp-tutorial/stage3/lib/BUILD</span>
cc_library<span class="o">(</span>
    name <span class="o">=</span> <span class="s2">"hello-time"</span>,
    srcs <span class="o">=</span> <span class="o">[</span><span class="s2">"hello-time.cc"</span><span class="o">]</span>,
    hdrs <span class="o">=</span> <span class="o">[</span><span class="s2">"hello-time.h"</span><span class="o">]</span>,
    <span class="c"># 让当前目标对于工作空间的main包可见。默认情况下目标仅仅被当前包可见</span>
    visibility <span class="o">=</span> <span class="o">[</span><span class="s2">"//main:__pkg__"</span><span class="o">]</span>,
<span class="o">)</span>
</code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#cpp-tutorial/stage3/main/BUILD</span>
cc_library<span class="o">(</span>
    name <span class="o">=</span> <span class="s2">"hello-greet"</span>,
    srcs <span class="o">=</span> <span class="o">[</span><span class="s2">"hello-greet.cc"</span><span class="o">]</span>,
    hdrs <span class="o">=</span> <span class="o">[</span><span class="s2">"hello-greet.h"</span><span class="o">]</span>,
<span class="o">)</span>
 
cc_binary<span class="o">(</span>
    name <span class="o">=</span> <span class="s2">"hello-world"</span>,
    srcs <span class="o">=</span> <span class="o">[</span><span class="s2">"hello-world.cc"</span><span class="o">]</span>,
    deps <span class="o">=</span> <span class="o">[</span>
        <span class="c"># 依赖当前包中的hello-greet目标</span>
        <span class="s2">":hello-greet"</span>,
        <span class="c"># 依赖工作空间根目录下的lib包中的hello-time目标</span>
        <span class="s2">"//lib:hello-time"</span>,
    <span class="o">]</span>,
<span class="o">)</span>
</code></pre></div></div>

<p>在BUILD文件或者命令行中，你都使用标签（Label）来引用目标。</p>

<h4 id="构建-java-项目">构建 Java 项目</h4>

<p>自行参考官网 <a href="https://docs.bazel.build/versions/4.0.0/tutorial/java.html">java教程</a></p>

<h3 id="目录结构">目录结构</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>workspace-name&gt;/                          <span class="c"># 工作空间根目录</span>
  bazel-my-project <span class="o">=&gt;</span> &lt;...my-project&gt;     <span class="c"># execRoot的符号链接，所有构建动作在此目录下执行</span>
  bazel-out <span class="o">=&gt;</span> &lt;...bin&gt;                   <span class="c"># outputPath的符号链接</span>
  bazel-bin <span class="o">=&gt;</span> &lt;...bin&gt;                   <span class="c"># 最近一次写入的二进制目录的符号链接，即$(BINDIR)</span>
  bazel-genfiles <span class="o">=&gt;</span> &lt;...genfiles&gt;         <span class="c"># 最近一次写入的genfiles目录的符号链接，即$(GENDIR)</span>
 
/home/user/.cache/bazel/                  <span class="c"># outputRoot，所有工作空间的Bazel输出的根目录</span>
  _bazel_<span class="nv">$USER</span>/                           <span class="c"># outputUserRoot，当前用户的Bazel输出的根目录</span>
    <span class="nb">install</span>/
      fba9a2c87ee9589d72889caf082f1029/   <span class="c"># installBase，Bazel安装清单的哈希值</span>
        _embedded_binaries/               <span class="c"># 第一次运行时从Bazel可执行文件的数据段解开的可执行文件或脚本</span>
    7ffd56a6e4cb724ea575aba15733d113/     <span class="c"># outputBase，某个工作空间根目录的哈希值</span>
      action_cache/                       <span class="c"># Action cache目录层次</span>
      action_outs/                        <span class="c"># Action output目录</span>
      command.log                         <span class="c"># 最近一次Bazel命令的stdout/stderr输出</span>
      external/                           <span class="c"># 远程存储库被下载、链接到此目录</span>
      server/                             <span class="c"># Bazel服务器将所有服务器有关的文件存放在此</span>
        jvm.out                           <span class="c"># Bazel服务器的调试输出</span>
      execroot/                           <span class="c"># 所有Bazel Action的工作目录</span>
        &lt;workspace-name&gt;/                 <span class="c"># Bazel构建的工作树</span>
          _bin/                           <span class="c"># 助手工具链接或者拷贝到此</span>
          bazel-out/                      <span class="c"># outputPath，构建的实际输出目录</span>
            local_linux-fastbuild/        <span class="c"># 每个独特的BuildConfiguration实例对应一个子目录</span>
              bin/                        <span class="c"># 单个构建配置二进制输出目录，$(BINDIR)</span>
                foo/bar/_objs/baz/        <span class="c"># 命名为//foo/bar:baz的cc_*规则的Object文件所在目录</span>
                  foo/bar/baz1.o          <span class="c"># //foo/bar:baz1.cc对应的Object文件</span>
                  other_package/other.o   <span class="c"># //other_package:other.cc对应的Object文件</span>
                foo/bar/baz               <span class="c"># //foo/bar:baz这一cc_binary生成的构件</span>
                foo/bar/baz.runfiles/     <span class="c"># //foo/bar:baz生成的二进制构件的runfiles目录</span>
                  MANIFEST
                  &lt;workspace-name&gt;/
                    ...
              genfiles/                   <span class="c"># 单个构建配置生成的源文件目录，$(GENDIR)</span>
              testlogs/                   <span class="c"># Bazel的内部测试运行器将日志文件存放在此</span>
              include/                    <span class="c"># 按需生成的include符号链接树，符号链接bazel-include指向这里</span>
            host/                         <span class="c"># 本机的BuildConfiguration</span>
        &lt;packages&gt;/                       <span class="c"># 构建引用的包，对于此包来说，它就像一个正常的WORKSPACE </span>
</code></pre></div></div>

<h3 id="外部依赖">外部依赖</h3>

<p>Bazel允许依赖其它项目中定义的目标，这些来自其它项目的依赖叫做“外部依赖“。<strong>当前工作空间的WORKSPACE 文件声明从何处下载外部依赖的源码。</strong></p>

<p>外部依赖可以有自己的1-N个BUILD文件，其中定义自己的目标。当前项目可以使用这些目标。例如下面的两个项目结构：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/
  home/
    user/
      project1/
        WORKSPACE
        BUILD
        srcs/
          ...
      project2/
        WORKSPACE
        BUILD
        my-libs/
</code></pre></div></div>

<p>如果 project1 需要依赖定义在 project2/BUILD 中的目标 :foo，则可以在其 WORKSPACE 中声明一个存储库（repository），名字为 project2，位于 /home/user/project2 。然后，可以在BUILD中通过标签<code class="language-plaintext highlighter-rouge">@project2//:foo</code> 引用目标foo。</p>

<p>除了依赖来自文件系统其它部分的目标、下载自互联网的目标以外，用户还可以编写自己的存储库规则（repository rules ）以实现更复杂的行为。</p>

<p>WORKSPACE 的语法格式和 BUILD 相同，但是允许使用<a href="https://docs.bazel.build/versions/master/be/workspace.html">不同的规则集</a>。</p>

<p>Bazel会把外部依赖下载到 $(bazel info output_base)/external目录中，要删除掉外部依赖，执行：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bazel clean <span class="nt">--expunge</span>
</code></pre></div></div>

<h4 id="外部依赖类型">外部依赖类型</h4>

<h5 id="bazel项目">Bazel项目</h5>

<p>可以使用 local_repository、git_repository 或者 http_archive 这几个规则来引用。</p>

<p>引用本地Bazel项目的例子：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>local_repository<span class="o">(</span>
    name <span class="o">=</span> <span class="s2">"coworkers_project"</span>,
    path <span class="o">=</span> <span class="s2">"/path/to/coworkers-project"</span>,
<span class="o">)</span>
</code></pre></div></div>

<p>在BUILD中，引用coworkers_project中的目标//foo:bar时，使用标签 @coworkers_project//foo:bar</p>

<h5 id="非bazel项目">非Bazel项目</h5>

<p>可以使用new_local_repository、new_git_repository或者new_http_archive这几个规则来引用。你需要自己编写BUILD文件来构建这些项目。</p>

<p>引用本地非Bazel项目的例子：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>new_local_repository<span class="o">(</span>
    name <span class="o">=</span> <span class="s2">"coworkers_project"</span>,
    path <span class="o">=</span> <span class="s2">"/path/to/coworkers-project"</span>,
    build_file <span class="o">=</span> <span class="s2">"coworker.BUILD"</span>,
<span class="o">)</span>

cc_library<span class="o">(</span>
    name <span class="o">=</span> <span class="s2">"some-lib"</span>,
    srcs <span class="o">=</span> glob<span class="o">([</span><span class="s2">"**"</span><span class="o">])</span>,
    visibility <span class="o">=</span> <span class="o">[</span><span class="s2">"//visibility:public"</span><span class="o">]</span>,
<span class="o">)</span>&amp;nbsp<span class="p">;</span>
</code></pre></div></div>

<p>在BUILD文件中，使用标签@coworkers_project//:some-lib引用上面的库。</p>

<h5 id="外部包">外部包</h5>

<p>对于Maven仓库，可以使用规则maven_jar/maven_server来下载JAR包，并将其作为Java依赖。</p>

<p>多查看一下 <a href="https://docs.bazel.build/versions/4.0.0/rules.html">规则</a> ，如如何引用 <a href="https://github.com/bazelbuild/rules_go">go规则</a>  包括 go_repository</p>

<h4 id="依赖拉取">依赖拉取</h4>

<p>默认情况下，执行bazel Build时会按需自动拉取依赖，你也可以禁用此特性，并使用bazel fetch预先手工拉取依赖。</p>

<h4 id="依赖缓存">依赖缓存</h4>

<p>Bazel会缓存外部依赖，当WORKSPACE改变时，会重新下载或更新这些依赖。</p>

<h3 id="常见规则用例">常见规则用例</h3>

<p>通配符</p>

<p>可以使用glob语法为目标添加多个文件：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pkg_tar<span class="o">(</span>
    name <span class="o">=</span> <span class="s2">"licenses"</span>,
    srcs <span class="o">=</span> glob<span class="o">([</span><span class="s2">"**/licenses.yaml"</span><span class="o">])</span>,  <span class="c">#通配符，使用glob语法可以为目标添加多个文件</span>
    extension <span class="o">=</span> <span class="s2">"tar"</span>,
    strip_prefix <span class="o">=</span> <span class="s2">"."</span>,   
<span class="o">)</span>
</code></pre></div></div>

<p>args 以内存的方式储存命令</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>args <span class="o">=</span> <span class="o">[</span>
        <span class="s2">"</span><span class="si">$(</span>location build.sh<span class="si">)</span><span class="s2">"</span>,
        <span class="s2">"</span><span class="si">$(</span>location //licenses:licenses.tar<span class="si">)</span><span class="s2">"</span>,
    <span class="o">]</span>,
</code></pre></div></div>

<p>pkg_tar() 生成tar包 压缩包</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pkg_tar<span class="o">(</span>
    name <span class="o">=</span> <span class="s2">"licenses"</span>,
    srcs <span class="o">=</span> glob<span class="o">([</span><span class="s2">"**/licenses.yaml"</span><span class="o">])</span>,
    extension <span class="o">=</span> <span class="s2">"tar"</span>,
    strip_prefix <span class="o">=</span> <span class="s2">"."</span>, <span class="c">#文件根目录 A relative path may start with "./" (or be ".") but cannot use ".." to go up level(s)</span>
<span class="o">)</span>
</code></pre></div></div>

<blockquote>
  <p>借鉴前人<a href="https://blog.gmem.cc/bazel-study-note">笔记</a>，如有侵权，删除</p>
</blockquote>

:ET